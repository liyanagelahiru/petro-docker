#!/bin/bash

###
# create-project - Creates initial project configuration
###


## VARIABLES
config_name=""
dotenv_environment=()
enabled_services=""
show_configs=false
show_profiles=false

# Functions

# Returns the help message
function _return_help {
	echo ""
	echo "Docker Deployment Script"
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo ""
	echo " --help, -h               - returns this screen"
    echo " --available-profiles     - lists available profiles in a config"
    echo " --available-configs      - returns a list of available configs."
    echo " --enable-profiles, -p    - enables selected profiles (ex. 'debug' or 'debug,dev')"
    echo " --config, -c             - selects a different configuration to be used for deployment"
    echo " --environment, -e        - modifies a compose environment variable"
    echo ""
}

function build_config {
    >&2 printf "Building configuration using '$config_name' as base...\n"

    if [ -f docker-compose.yml ]; then
        printf "Backing up previous compose config.\n"

        rm -rf docker-compose.bak.yml
        mv docker-compose.yml docker-compose.bak.yml
    fi

    cp "./manifest/deploy/$config_name.yml" docker-compose.yml

    # Copy configuration 
    printf "Applying configuration.\n"
    cp -rnv ./manifest/deploy/default/* .

    printf "Applying overrides.\n"
    if [ -d ./manifest/deploy/override/$config_name/ ]; then
        cp -rfv ./manifest/deploy/override/$config_name/* .
    elif [ -d ./manifest/deploy/override/default/ ]; then
        cp -rfv ./manifest/deploy/override/default/* .
    fi

    printf "Applying compose environment.\n"
    if ! [ -f .env ]; then
        printf "## Project environment configuration ##\n#\n" >> .env
        printf "#  This file contains environment configuration for a docker compose project.\n" >> .env
        printf "#  Please do not configure this file unless you know what you are doing!\n\n" >> .env
    fi

    # prepend some defaults to the dotenv_environment.
    default_environment=(
        "COMPOSE_PROFILES=${enabled_profiles}")
    dotenv_environment=("${default_environment[@]}" "${dotenv_environment[@]}")

    for entry in ${dotenv_environment[@]}; do
        read -d "=" -rasplit<<< "$entry"
        if grep -q "^${split[0]}=" .env; then
            sed -i "s|${split[0]}=.*|$entry|" .env
        else
            echo "$entry" >> .env
        fi
    done
}

# Fixing some nonsense with function returning
IFS=

cd "$(dirname $0)/../"

# Enable defaults
. manifest/deploy/deploy.conf

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" == -* ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            --available-profiles)
                show_profiles=true
                ;;
            --available-configs)
                show_configs=true
                ;;
            --config | -c)
                ((i++))
                config_name="${!i}"
                ;;
            --enable-profiles | -p)
                ((i++))
                enabled_profiles="${!i}"
                ;;
            --environment | -e)
                ((i++))
                dotenv_environment+=("${!i}")
                ;;
        esac
    else
        _command+=("${!i}")
    fi
done


if ! [ -f "./manifest/deploy/$config_name.yml" ]; then
    printf "Config '$config_name' does not exist! Exiting...\n"
    exit
fi

if [ $show_profiles == true ]; then
    printf "Available Profiles for '$config_name' config: "
    docker-compose --project-directory manifest/deploy/default -f manifest/deploy/$config_name.yml config --profiles | tr '\n' ' '
    printf '\n'
    exit
fi

if [ $show_configs == true ]; then
    printf "Available Configs: "
    find manifest/deploy -name '*.yml' -exec basename {} \; | sed -e 's/\.yml$//' | tr '\n' ' '
    printf "\n"
    exit
fi

build_config
